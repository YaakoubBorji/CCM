/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.yaakoub.cryptocurrencymarket.api;

import com.yaakoub.cryptocurrencymarket.model.RoleEnum;
import com.yaakoub.cryptocurrencymarket.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-01-29T15:18:53.033Z")

@Api(value = "user", description = "the user API")
public interface UserApi {

//    @ApiOperation(value = "Returs current user details.", nickname = "getCurrentUser", notes = "", response = User.class, authorizations = {
//        @Authorization(value = "cookieAuth")
//    }, tags={ "user", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "successful operation", response = User.class),
//        @ApiResponse(code = 400, message = "Invalid username/password supplied") })
//    @RequestMapping(value = "/user",
//        produces = { "application/json", "application/xml" },
//        method = RequestMethod.GET)
    @GetMapping(path = "/user")
    ResponseEntity<User> getCurrentUser();


//    @ApiOperation(value = "Get user by user name", nickname = "getUserByName", notes = "", response = User.class, authorizations = {
//        @Authorization(value = "cookieAuth")
//    }, tags={ "user", })
//    @ApiResponses(value = {
//        @ApiResponse(code = 200, message = "successful operation", response = User.class),
//        @ApiResponse(code = 400, message = "Invalid username supplied"),
//        @ApiResponse(code = 404, message = "User not found") })
//    @RequestMapping(value = "/user/{username}",
//        produces = { "application/json", "application/xml" },
//        method = RequestMethod.GET)
    @GetMapping(path = "/user/{username}")
    ResponseEntity<User> getUserByName(@ApiParam(value = "The name that needs to be fetched. Use user1 for testing.", required = true) @PathVariable("username") String username);

}
